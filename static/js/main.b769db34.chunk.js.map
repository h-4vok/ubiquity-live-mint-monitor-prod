{"version":3,"sources":["components/atoms/Title.jsx","components/atoms/BlockInput.jsx","components/atoms/StretchedButton.jsx","components/atoms/Label.jsx","components/atoms/FungibleTokenThumbnail.jsx","components/atoms/ShareTwitterButton.jsx","lib/constants/pages/index.js","lib/constants/index.js","lib/monitor/monitorContext.js","lib/monitor/useMonitor.js","lib/global/globalState.js","lib/global/observer.js","lib/nftDiscovery.js","lib/distiller.js","lib/delay.js","lib/monitor/monitor.js","components/pages/HomePage.jsx","lib/formatting/numberFormat.js","components/molecules/FungibleTokenRow.jsx","components/molecules/BasicModal.jsx","lib/nftHandler/nftHandler.js","lib/nftHandler/nftHandlerContext.js","lib/nftHandler/withNFTHandler.js","components/pages/LiveMonitorPage.jsx","lib/nftHandler/useNFTHandler.js","components/pages/Errors/404.jsx","Router.jsx","App.jsx","components/common/Loading.jsx","reportWebVitals.js","index.js"],"names":["Title","children","variant","Typography","className","BlockInput","label","placeholder","onChange","blockNumber","TextField","id","sx","width","type","value","InputLabelProps","shrink","StretchedButton","endIcon","onClick","Button","Label","FungibleTokenThumbnail","imageSrc","alt","src","ShareTwitterButton","props","target","href","shareTwitterURL","text","url","hashtags","liveMonitorLink","buildUriSolscanApiGetHolders","nftAddress","solscanUrl","lineBreakCode","MonitorContext","React","createContext","MonitorProvider","start","setState","monitor","Monitor","process","state","startBlockNumber","stop","resetMonitorState","latestBlockNumber","isRunning","setStartBlockNumber","Provider","this","Component","Consumer","useMonitor","useContext","GlobalState","NFTHandler","Observer","emitNFTEvent","nft","emit","on","handleNFT","EventEmitter","NftDiscovery","txCandidates","tx","events","destination","requestToSolscan","axios","get","nftData","metadataUri","data","metadata","uri","getOwnerUri","ownerData","console","log","discoveryData","address","account","error","e","Distiller","block","txs","filter","x","length","getNFTData","delay","ms","Promise","res","setTimeout","apiKey","setBlockNumber","setLatestBlockNumber","UbiquityClient","info","findNFTcandidates","syncApi","currentBlockNumber","PROTOCOL","SOLANA","NETWORKS","MAIN_NET","response","status","config","blocksApi","getBlock","HomePage","history","useHistory","useState","goToMonitorPage","push","useEffect","getNFTsCount","reset","Container","Box","Grid","container","spacing","item","xs","sm","returnDefault","decimalPlaces","defaultIsZero","toFixed","formatRoyalties","royalties","slice","integerPart","decimalPart","toString","join","encode","require","FungibleTokenRow","Paper","goToNftDetail","onOpenNftDetail","Stack","direction","image","name","symbol","description","seller_fee_basis_points","external_url","modalStyle","overflow","containerStyle","position","top","left","transform","maxWidth","p","transition","height","BasicModal","open","setOpen","ownerAddress","owner","Modal","onClose","elevation","Link","underline","attributes","map","attribute","index","trait_type","getNFTs","setNFTs","NFTHandlerContext","NFTHandlerProvider","maxNFTsReached","nfts","_","resetNFTState","LiveMonitorPage","openModal","setOpenModal","selectedNft","setSelectedNft","startMonitoring","useStyles","makeStyles","theme","icon","color","palette","secondary","main","display","flexDirection","alignItems","justifyContent","paper","backgroundColor","background","default","margin","button","marginTop","PageNotFound","classes","startIcon","darkTheme","createTheme","mode","Router","ThemeProvider","exact","path","component","phat","NotFound","App","PureComponent","backdrop","zIndex","drawer","Loading","Backdrop","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","currentVersion","pkg","version","isEnabled","isVerboseMode","loadingComponent"],"mappings":"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","file":"static/js/main.b769db34.chunk.js","sourcesContent":["import { Typography } from \"@mui/material\";\r\n\r\nexport const Title = ({ children, variant = \"h3\" }) => (\r\n    <Typography variant={variant} className=\"title\">{children}</Typography>\r\n);","import { TextField } from \"@mui/material\";\r\n\r\nexport const BlockInput = ({ label, placeholder, onChange, blockNumber }) => (\r\n  <TextField\r\n    id=\"outlined-number\"\r\n    sx={{ width: \"100%\" }}\r\n    label={label}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    value={blockNumber}\r\n    onChange={onChange}\r\n    InputLabelProps={{\r\n      shrink: true,\r\n    }}\r\n  />\r\n);\r\n","import { Button } from \"@mui/material\";\r\n\r\nexport const StretchedButton = ({ children, endIcon, onClick }) => (\r\n  <Button\r\n    className=\"stretched-button\"\r\n    variant=\"contained\"\r\n    endIcon={endIcon}\r\n    onClick={onClick}\r\n  >\r\n    {children}\r\n  </Button>\r\n);\r\n","import { Typography } from \"@mui/material\";\r\n\r\nexport const Label = ({ children, variant = \"p\" }) => (\r\n    <Typography variant={variant} className=\"label\">{children}</Typography>\r\n);","export const FungibleTokenThumbnail = ({ imageSrc, alt = \"\" }) => (\r\n  <div>\r\n    <img className=\"fungible-token-thumbnail\" src={imageSrc} alt={alt} />\r\n  </div>\r\n);\r\n","import { Button } from \"@mui/material\"\r\nimport TwitterIcon from '@mui/icons-material/Twitter'\r\nimport { shareTwitterURL } from 'share-twitter'\r\n\r\nexport const ShareTwitterButton = (props) => (\r\n  <Button\r\n    variant=\"contained\"\r\n    className=\"stretched-button\"\r\n    target=\"_blank\"\r\n    endIcon={<TwitterIcon />}\r\n    href={shareTwitterURL({\r\n        text: props.text,\r\n        url: props.url,\r\n        hashtags: props.hashtags\r\n    })}\r\n  >\r\n    Share on Twitter!\r\n  </Button>\r\n);","const homeHash = \"#/\"\r\nconst homeLink = \"/\"\r\nconst liveMonitorLink = \"/monitor\";\r\n\r\nexport { homeHash, homeLink, liveMonitorLink }","export { homeHash, homeLink, liveMonitorLink } from \"./pages\";\r\n\r\nexport const solscanApiGetAccount = \"https://api.solscan.io/account?address=\";\r\nexport const buildUriSolscanApiGetHolders = (nftAddress) =>\r\n  `https://public-api.solscan.io/token/holders?tokenAddress=${nftAddress}&offset=0&limit=1`;\r\nexport const solscanUrl = \"https://solscan.io/token/\";\r\nexport const lineBreakCode = \"%0A\";\r\nexport const solscanLinkToAccount = 'https://solscan.io/account/';","import React  from 'react'\r\nimport { Monitor } from \"../monitor\"\r\n\r\nconst MonitorContext = React.createContext(null)\r\n\r\nclass MonitorProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      monitor: null,\r\n      startBlockNumber: -1,\r\n      blockNumber: 0,\r\n      latestBlockNumber: 0\r\n    }\r\n  }\r\n\r\n  start = async () => {\r\n    this.setState(() => ({\r\n      monitor: new Monitor(\r\n        process.env.REACT_APP_API_KEY,\r\n        this.#setBlockNumber,\r\n        this.#setLatestBlockNumber\r\n      )\r\n    }), async () => await this.state.monitor.start(this.state.startBlockNumber))\r\n  }\r\n\r\n  stop = () => this.state.monitor.stop()\r\n\r\n  resetMonitorState = () => {\r\n    this.stop()\r\n    this.setState(() => ({\r\n      monitor: null,\r\n      blockNumber: 0,\r\n      latestBlockNumber: 0\r\n    }))\r\n  }\r\n\r\n  isRunning = () => this.state.monitor && this.state.monitor.isRunning()\r\n  \r\n  setStartBlockNumber = (startBlockNumber) => {\r\n    this.setState(() => ({\r\n      startBlockNumber\r\n    }))\r\n  }\r\n\r\n  #setBlockNumber = (blockNumber) => {\r\n    this.setState(() => ({\r\n      blockNumber\r\n    }))\r\n  }\r\n\r\n  #setLatestBlockNumber = (latestBlockNumber) => {\r\n    this.setState(() => ({\r\n      latestBlockNumber\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MonitorContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          start: this.start,\r\n          stop: this.stop,\r\n          setStartBlockNumber: this.setStartBlockNumber,\r\n          resetMonitorState: this.resetMonitorState,\r\n          isRunning: this.isRunning\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </MonitorContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nconst MonitorConsumer = MonitorContext.Consumer\r\n\r\nexport { MonitorProvider, MonitorConsumer, MonitorContext }\r\n","import React from 'react'\r\nimport { MonitorContext } from './monitorContext'\r\n\r\nexport function useMonitor() {\r\n  return React.useContext(MonitorContext)\r\n}\r\n","import { Observer } from './observer'\r\n\r\nexport const GlobalState = {\r\n  NFTHandler: null,\r\n  Observer:  new Observer()\r\n};\r\n\r\nexport const resetNFTState = () => {\r\n  if (GlobalState.NFTHandler.getNFTsCount() > 0) {\r\n    GlobalState.NFTHandler.reset()\r\n  }\r\n}","import { EventEmitter } from 'events'\r\nimport { GlobalState } from '../global'\r\n\r\nexport class Observer {\r\n  #eventEmitter\r\n  #NFT_EVENT_KEY\r\n\r\n  constructor() {\r\n    this.#eventEmitter = new EventEmitter()\r\n    this.#NFT_EVENT_KEY = 'nft_event'\r\n    this.#onNFTEvent()\r\n  }\r\n\r\n  emitNFTEvent = (nft) => this.#eventEmitter.emit(this.#NFT_EVENT_KEY, nft)\r\n\r\n  #onNFTEvent = () => this.#eventEmitter.on(this.#NFT_EVENT_KEY, (nft) => GlobalState.NFTHandler.handleNFT(nft))\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  solscanApiGetAccount,\r\n  buildUriSolscanApiGetHolders,\r\n} from \"./constants\";\r\nimport { GlobalState } from \"./global\";\r\n\r\nexport class NftDiscovery {\r\n  async getNFTData(txCandidates) {\r\n    for (var tx of txCandidates) {\r\n      try {\r\n        const nftAddress = tx.events[1].destination;\r\n\r\n        const requestToSolscan = `${solscanApiGetAccount}${nftAddress}`;\r\n\r\n        const nftData = await axios.get(requestToSolscan);\r\n\r\n        // Now we bring the data from arweave\r\n        const metadataUri = nftData.data.data.metadata.data.uri;\r\n\r\n        const { data } = await axios.get(metadataUri);\r\n\r\n        // We bring the current owner information\r\n        const getOwnerUri = buildUriSolscanApiGetHolders(nftAddress);\r\n        const ownerData = await axios.get(getOwnerUri);\r\n\r\n        data.ownerData = ownerData.data.data[0];\r\n        console.log({ discoveryData: data });\r\n\r\n        GlobalState.Observer.emitNFTEvent({\r\n          ...data,\r\n          address: nftData.data.data.account,\r\n        });\r\n      } catch (e) {\r\n        console.error({ e });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NftDiscovery } from \"./nftDiscovery\";\r\n\r\nexport class Distiller {\r\n  #nftDiscovery;\r\n\r\n  constructor() {\r\n    this.#nftDiscovery = new NftDiscovery();\r\n  }\r\n\r\n  async findNFTcandidates(block) {\r\n    const txCandidates = block.txs.filter(\r\n      (x) => x.events.length === 6 && x.events[1].type === \"create_account\"\r\n    );\r\n\r\n    if (txCandidates) {\r\n      this.#nftDiscovery.getNFTData(txCandidates);\r\n    }\r\n  }\r\n}\r\n","export const delay = (ms) => new Promise((res) => setTimeout(res, ms))\r\n","import { UbiquityClient, NETWORKS, PROTOCOL } from \"@ubiquity/ubiquity-ts-client\"\r\nimport { Distiller } from \"../distiller\"\r\nimport { delay } from '../delay'\r\n\r\nexport class Monitor {\r\n    #running\r\n    #client\r\n    #distiller\r\n    #setBlockNumber\r\n    #setLatestBlockNumber\r\n\r\n    constructor(apiKey, setBlockNumber, setLatestBlockNumber) {\r\n      this.#client= new UbiquityClient(apiKey)\r\n      this.#distiller = new Distiller()\r\n      this.#setBlockNumber = setBlockNumber\r\n      this.#setLatestBlockNumber = setLatestBlockNumber\r\n    }\r\n\r\n    async start(startBlockNumber) {\r\n      console.log('Running monitor')\r\n\r\n      const latestBlockNumber = await this.#getLatestBlockNumber()\r\n      let blockNumber = startBlockNumber === 'current' ? latestBlockNumber : startBlockNumber\r\n      this.#setLatestBlockNumber(latestBlockNumber)\r\n      this.#running = true\r\n\r\n      while (latestBlockNumber >= blockNumber && this.isRunning()) {\r\n        console.log(`Monitoring on block number: ${blockNumber}`)\r\n\r\n        if (blockNumber === -1) blockNumber = latestBlockNumber\r\n        this.#setBlockNumber(blockNumber)\r\n  \r\n        // Cancel monitoring if we have reached the ending block\r\n        // which is only used for debugging purposes\r\n        if (!!latestBlockNumber && blockNumber > latestBlockNumber)\r\n          return\r\n  \r\n        console.info(`${blockNumber} / ${latestBlockNumber}`)\r\n  \r\n        const block = await this.#getBlock(blockNumber)\r\n        if (block) {\r\n          await this.#distiller.findNFTcandidates(block)\r\n        }\r\n  \r\n        blockNumber++\r\n\r\n        await delay(1000)\r\n      }\r\n\r\n      if (!this.isRunning()) {\r\n        return\r\n      }\r\n  \r\n      setTimeout(async () => await this.start(latestBlockNumber), 1000)\r\n    }\r\n\r\n    stop = () => this.#running = false\r\n\r\n    isRunning = () => this.#running\r\n\r\n    async #getLatestBlockNumber() {\r\n      console.log(\"getLatestBlockNumber\")\r\n\r\n      try {\r\n        const { data } = await this.#client\r\n                                    .syncApi\r\n                                    .currentBlockNumber(PROTOCOL.SOLANA, NETWORKS.MAIN_NET)\r\n        \r\n        console.log({data})\r\n        return data\r\n      } catch (e) {\r\n        console.log(`error code::${e.response.status} url::${e.config.url}`)\r\n      }\r\n    }\r\n\r\n    async #getBlock(blockNumber) {\r\n      console.log(\"getBlock\")\r\n\r\n      try {\r\n        const { data } = await this.#client\r\n                                      .blocksApi\r\n                                      .getBlock(PROTOCOL.SOLANA, NETWORKS.MAIN_NET, blockNumber)\r\n        console.log({data})\r\n\r\n        return data\r\n      } catch (e) {\r\n        console.log(`error code::${e.response.status} url::${e.config.url}`)\r\n      }\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Box, Grid } from \"@mui/material\";\r\nimport AddToQueueIcon from \"@mui/icons-material/AddToQueue\";\r\nimport { Title, BlockInput, StretchedButton } from \"../atoms\";\r\nimport { liveMonitorLink } from \"../../lib/constants\";\r\nimport { useMonitor } from \"../../lib/monitor\";\r\nimport { resetNFTState } from \"../../lib/global\";\r\n\r\nexport const HomePage = () => {\r\n  const history = useHistory();\r\n  const [blockNumber, setBlockNumber] = useState(\"\");\r\n  const { monitor, setStartBlockNumber, resetMonitorState } = useMonitor();\r\n\r\n  const goToMonitorPage = async (blockNumber, history) => {\r\n    await setStartBlockNumber(blockNumber || \"current\");\r\n\r\n    history.push(liveMonitorLink);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (monitor) {\r\n      resetMonitorState();\r\n    }\r\n\r\n    resetNFTState();\r\n  }, [monitor, resetMonitorState]);\r\n\r\n  return (\r\n    <Container className=\"text-align--center\">\r\n      <Title>Ubiquity</Title>\r\n      <Title>Live Mint Monitor</Title>\r\n\r\n      <Box className=\"box\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={8}>\r\n            <BlockInput\r\n              label=\"Start with block...\"\r\n              placeholder=\"Latest\"\r\n              onChange={(e) => setBlockNumber(e.target.value)}\r\n              blockNumber={blockNumber}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <StretchedButton\r\n              endIcon={<AddToQueueIcon />}\r\n              onClick={() => goToMonitorPage(blockNumber, history)}\r\n            >\r\n              GO!\r\n            </StretchedButton>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Title variant=\"h6\">&nbsp;</Title>\r\n      <Title variant=\"h6\">Monitor all NFT mints in the Solana blockchain</Title>\r\n    </Container>\r\n  );\r\n};\r\n","const zero = 0;\r\n\r\nconst returnDefault = (decimalPlaces, defaultIsZero = true) => {\r\n  if (defaultIsZero) return zero.toFixed(decimalPlaces);\r\n  return null;\r\n};\r\n\r\nexport const toFixed = (\r\n  candidateNumber,\r\n  decimalPlaces,\r\n  defaultIsZero = true\r\n) => {\r\n  if (!candidateNumber) {\r\n    return returnDefault(decimalPlaces, defaultIsZero);\r\n  }\r\n\r\n  try {\r\n    const convertedNumber = parseInt(candidateNumber);\r\n    const output = convertedNumber.toFixed(decimalPlaces);\r\n\r\n    console.log({ candidateNumber, convertedNumber, output });\r\n    return output;\r\n  } catch {\r\n    return returnDefault(decimalPlaces, defaultIsZero);\r\n  }\r\n};\r\n\r\nexport const formatRoyalties = (royalties) => {\r\n    if (!royalties) return returnDefault(2);\r\n    if (!royalties.slice) return returnDefault(2);\r\n\r\n    const integerPart = royalties.slice(0, royalties.length - 2);\r\n    const decimalPart = royalties.slice(royalties.length - 2, royalties.length);\r\n    const output = [integerPart.toString(), \".\", decimalPart.toString()].join(\"\");\r\n\r\n    return output;\r\n}","import { Paper, Stack, Grid } from \"@mui/material\";\r\nimport { FungibleTokenThumbnail, Label, ShareTwitterButton } from \"../atoms\";\r\nimport { lineBreakCode, solscanUrl } from \"../../lib/constants\";\r\nimport { formatRoyalties } from \"../../lib/formatting/numberFormat\";\r\nconst { encode } = require(\"url-encode-decode\");\r\n\r\nexport const FungibleTokenRow = (props) => (\r\n  <div>\r\n    <Paper\r\n      className=\"padding--40px hover-animation cursor--pointer nft-row\"\r\n      onClick={() => goToNftDetail(props.nft, props.onOpenNftDetail)}\r\n    >\r\n      <Stack direction=\"row\" spacing={2}>\r\n        <FungibleTokenThumbnail imageSrc={props.nft.image} />\r\n        <Grid container className=\"text-align--left\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Label variant=\"h4\">{props.nft.name}</Label>\r\n            <Label variant=\"h5\">{props.nft.symbol}</Label>\r\n            <Label variant=\"span\">{props.nft.description}</Label>\r\n          </Grid>\r\n        </Grid>\r\n      </Stack>\r\n    </Paper>\r\n    <ShareTwitterButton\r\n      text={`Take a look at this awesome NFT!${lineBreakCode}${encode(\r\n        props.nft.name\r\n      )}${lineBreakCode}${lineBreakCode}Royalties: ${encode(\r\n        `${formatRoyalties(props.nft.seller_fee_basis_points)}%`\r\n      )}${lineBreakCode}${encode(`${solscanUrl}${props.nft.address}`)}${lineBreakCode}`}\r\n      url={props.nft.external_url}\r\n      hashtags=\"SolanaNFT, NFT, UbiquityAPI, UbiquityHackaton23\" />\r\n  </div>\r\n);\r\n\r\nconst goToNftDetail = (nftData, onOpenNftDetail) => {\r\n  // we will show a popup of the nft data\r\n  onOpenNftDetail(nftData);\r\n};\r\n","import * as React from \"react\";\r\nimport { Grid, Paper, Modal, Link } from \"@mui/material\";\r\nimport { Label, ShareTwitterButton } from \"../atoms\";\r\nimport { solscanUrl, solscanLinkToAccount, lineBreakCode } from \"../../lib/constants\";\r\nimport { formatRoyalties } from \"../../lib/formatting/numberFormat\";\r\nconst { encode } = require(\"url-encode-decode\");\r\nconst modalStyle = {\r\n  overflow:'scroll',\r\n};\r\n\r\nconst containerStyle = {\r\n  position: \"relative\",\r\n  top: \"60%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"70%\",\r\n  maxWidth: \"600px\",\r\n  p: 4,\r\n  \"box-shadow\": \"none !important\",\r\n  \"-webkit-transition\": \"none !important\",\r\n  transition: \"none !important\",\r\n  height: 'auto'\r\n};\r\n\r\nexport function BasicModal({ open, setOpen, nftData }) {\r\n  const handleClose = () => setOpen(false);\r\n  const ownerAddress = nftData && nftData.ownerData && nftData.ownerData.owner;\r\n\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"modal-modal-title\"\r\n      aria-describedby=\"modal-modal-description\"\r\n      sx={modalStyle}\r\n    >\r\n      <Paper sx={containerStyle} elevation={4} className=\"nft-show\">\r\n        <Grid container className=\"text-align--center\">\r\n          <Grid item xs={12}>\r\n            <div className=\"gradient-shadow\">\r\n              <Link\r\n                href={`${solscanUrl}${nftData.address}`}\r\n                target=\"_blank\"\r\n                underline=\"none\"\r\n              >\r\n                <img\r\n                  className=\"fungible-token-preview\"\r\n                  src={nftData.image}\r\n                  alt={nftData.name}\r\n                />\r\n              </Link>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Label variant=\"h6\">\r\n              <Link\r\n                href={`${solscanUrl}${nftData.address}`}\r\n                target=\"_blank\"\r\n                underline=\"none\"\r\n              >\r\n                {nftData.name}\r\n              </Link>\r\n            </Label>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link\r\n              href={`${solscanLinkToAccount}${ownerAddress}`}\r\n              target=\"_blank\"\r\n            >\r\n              <div className=\"text-overflow--ellipsis content-text\">{`Owner: ${ownerAddress}`}</div>\r\n            </Link>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            &nbsp;\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Link href={nftData.external_url} target=\"_blank\">\r\n              <Label variant=\"span\">{nftData.external_url}</Label>\r\n            </Link>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Label variant=\"p\">{nftData.description}</Label>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            &nbsp;\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Label variant=\"span\">\r\n              Royalties:{\" \"}\r\n              {`${formatRoyalties(nftData.seller_fee_basis_points)}%`}\r\n            </Label>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            &nbsp;\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Paper elevation={24} className=\"nft-show nft-show-table\">\r\n              <Grid container>\r\n                <Grid item xs={4} className=\"border-bottom--border-color\">\r\n                  <Label>Attribute</Label>\r\n                </Grid>\r\n                <Grid item xs={8} className=\"border-bottom--border-color\">\r\n                  <Label>Value</Label>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  &nbsp;\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                  &nbsp;\r\n                </Grid>\r\n                {nftData.attributes &&\r\n                  nftData.attributes.map((attribute, index) => (\r\n                    <React.Fragment key={`ATTRIBUTE_${index}`}>\r\n                      <Grid item xs={4}>\r\n                        <Label>{attribute.trait_type}</Label>\r\n                      </Grid>\r\n                      <Grid item xs={8}>\r\n                        <Label>{attribute.value}</Label>\r\n                      </Grid>\r\n                    </React.Fragment>\r\n                  ))}\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <ShareTwitterButton\r\n              text={`Take a look at this awesome NFT!${lineBreakCode}${encode(\r\n                nftData.name\r\n              )}${lineBreakCode}${lineBreakCode}Royalties: ${encode(\r\n                `${formatRoyalties(nftData.seller_fee_basis_points)}%`\r\n              )}${lineBreakCode}${encode(\r\n                `${solscanUrl}${nftData.address}`\r\n              )}${lineBreakCode}`}\r\n              url={nftData.external_url}\r\n              hashtags=\"SolanaNFT, NFT, UbiquityAPI, UbiquityHackathon23\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n}\r\n","export class NFTHandler {\r\n  #getNFTs\r\n  #setNFTs\r\n\r\n  constructor(getNFTs, setNFTs) {\r\n    this.#getNFTs = getNFTs\r\n    this.#setNFTs = setNFTs\r\n  }\r\n  \r\n  getNFTsCount = () => this.#getNFTs().length\r\n  \r\n  handleNFT = (nft) => this.#setNFTs([...this.#getNFTs(), nft])\r\n\r\n  reset = () => this.#setNFTs([])\r\n}\r\n","import React  from 'react'\r\nimport * as _ from 'lodash'\r\nimport { NFTHandler } from \"./nftHandler\"\r\nimport { GlobalState } from '../global'\r\n\r\nconst NFTHandlerContext = React.createContext(null)\r\n\r\nclass NFTHandlerProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      nfts: []\r\n    }\r\n\r\n    GlobalState.NFTHandler = new NFTHandler(\r\n      this.#getNFTs,\r\n      this.#setNFTs\r\n    )\r\n  }\r\n\r\n  maxNFTsReached = () => this.state.nfts.length >= process.env.REACT_APP_MAX_NFTS\r\n\r\n  #getNFTs = () => _.clone(this.state.nfts, false)\r\n\r\n  #setNFTs = (nfts) => {\r\n    this.setState(() => ({\r\n      nfts,\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <NFTHandlerContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          resetNFTState: this.resetNFTState,\r\n          maxNFTsReached: this.maxNFTsReached\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </NFTHandlerContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nconst NFTHandlerConsumer = NFTHandlerContext.Consumer\r\n\r\nexport { NFTHandlerProvider, NFTHandlerConsumer, NFTHandlerContext }\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { NFTHandlerContext } from './nftHandlerContext';\r\n\r\nexport const withNFTHandler = (Component) => {\r\n  const WrappedComponent = React.forwardRef((props, ref) => (\r\n    <NFTHandlerContext.Consumer>\r\n      {(nftHandlerContext) => <Component {...props} ref={ref} nftHandlerContext={nftHandlerContext} />}\r\n    </NFTHandlerContext.Consumer>\r\n  ))\r\n\r\n  hoistNonReactStatics(WrappedComponent, Component);\r\n\r\n  return WrappedComponent;\r\n}","import React, { useState, useEffect } from \"react\"\r\nimport { Grid, Stack, Box } from \"@mui/material\"\r\nimport { Title, Label } from \"../atoms\"\r\nimport { FungibleTokenRow, BasicModal } from \"../molecules\"\r\nimport { useNFTHandler } from '../../lib/nftHandler'\r\nimport { useMonitor } from '../../lib/monitor'\r\n\r\nexport const LiveMonitorPage = () => {\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [selectedNft, setSelectedNft] = useState({})\r\n  const { nfts, maxNFTsReached } = useNFTHandler()\r\n  const { blockNumber, latestBlockNumber, start, stop } = useMonitor()\r\n\r\n  useEffect(() => {\r\n    const startMonitoring = async () => {\r\n      await start()\r\n    }\r\n    \r\n    startMonitoring()\r\n  }, [start])\r\n\r\n  useEffect(() => {\r\n    if (maxNFTsReached()) {\r\n      console.log(`Monitor has been stopped, max nfts ammount(${process.env.REACT_APP_MAX_NFTS}) reached.`)\r\n      stop()\r\n    }\r\n  }, [nfts, maxNFTsReached, stop])\r\n\r\n  const openNftDetail = (nftData) => {\r\n    setSelectedNft(nftData);\r\n    setOpenModal(true);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container className=\"text-align--left\" spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Title variant=\"h5\">Ubiquity Live Mint Monitor</Title>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n        <Label>\r\n            {\r\n              blockNumber && latestBlockNumber ? \r\n              `${maxNFTsReached() ? 'Stopped' : 'Exploring blocks...'} (${blockNumber} / ${latestBlockNumber})` : \r\n              'Monitor is starting...'\r\n            }\r\n          </Label>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Label>\r\n            {\r\n              maxNFTsReached() ? `Monitor has been stopped, max nfts ammount(${process.env.REACT_APP_MAX_NFTS}) reached.` :\r\n              `NFTs found: ${nfts.length} / ${process.env.REACT_APP_MAX_NFTS}`\r\n            }\r\n          </Label>\r\n        </Grid>\r\n      </Grid>\r\n      <Stack spacing={2} className=\"margin-top--20px\">\r\n        {\r\n          nfts.map((nft, index) => <FungibleTokenRow key={`NFT_${index}`} nft={nft} onOpenNftDetail={() => openNftDetail(nft)} />)\r\n        }\r\n      </Stack>\r\n      <BasicModal\r\n        open={openModal}\r\n        setOpen={setOpenModal}\r\n        nftData={selectedNft}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { NFTHandlerContext } from './nftHandlerContext'\r\n\r\nexport function useNFTHandler() {\r\n  return React.useContext(NFTHandlerContext)\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Home from '@material-ui/icons/Home';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    width: 192,\r\n    height: 192,\r\n    color: theme.palette.secondary.main,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: '100%',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.default,\r\n    margin: 0,\r\n    height: `calc(100vh - 64px)`,\r\n  },\r\n  button: {\r\n    marginTop: 20,\r\n  },\r\n}));\r\n\r\nconst PageNotFound = () => {\r\nconst classes = useStyles();\r\n  return (\r\n      <Paper className={classes.paper}>\r\n        <div className={classes.container}>\r\n          <Typography variant=\"h4\">\r\n            404\r\n          </Typography>\r\n            Page not found.\r\n          <Typography variant=\"subtitle1\">\r\n          </Typography>\r\n          <Button\r\n            color=\"secondary\"\r\n            aria-label=\"home\"\r\n            href=\"/\"\r\n            className={classes.button}\r\n            startIcon={<Home />}\r\n          >\r\n            Home\r\n          </Button>\r\n        </div>\r\n      </Paper>\r\n  )\r\n}\r\n\r\n\r\nexport default PageNotFound;","import React from \"react\";\r\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\r\nimport { HomePage, LiveMonitorPage } from \"./components/pages\";\r\nimport NotFound from \"./components/pages/Errors/404\";\r\nimport { homeLink, liveMonitorLink } from \"./lib/constants\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n  },\r\n});\r\n\r\nconst Router = ({ children }) => {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path={homeLink} component={HomePage} />\r\n          <Route phat={liveMonitorLink} component={LiveMonitorPage} />\r\n          <Route component={NotFound} />\r\n          {children}\r\n        </Switch>\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import { PureComponent } from \"react\";\r\nimport { Container } from '@mui/material';\r\nimport Router from \"./Router\";\r\n\r\nexport class App extends PureComponent {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"bg\"></div>\r\n        <div className=\"bg bg2\"></div>\r\n        <div className=\"bg bg3\"></div>\r\n        <Container className=\"content\">\r\n          <Router />\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Loading = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Backdrop className={classes.backdrop} open={props.open}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport pkg from '../package.json';\r\nimport './index.css';\r\nimport './background.css';\r\nimport './gradientShadow.css';\r\nimport App from './App';\r\nimport Loading from './components/common/Loading'\r\nimport CacheBuster from 'react-cache-buster';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { NFTHandlerProvider } from './lib/nftHandler'\r\nimport { MonitorProvider } from './lib/monitor'\r\n\r\nconst isProduction = process.env.NODE_ENV === 'production'\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <CacheBuster\r\n    currentVersion={pkg.version}\r\n    isEnabled={isProduction} //If false, the library is disabled.\r\n    isVerboseMode={false} //If true, the library writes verbose logs to console.\r\n    loadingComponent={<Loading open={true} />} //If not pass, nothing appears at the time of new version check.\r\n  >\r\n    <MonitorProvider>\r\n      <NFTHandlerProvider>\r\n        <App />\r\n      </NFTHandlerProvider>\r\n    </MonitorProvider>\r\n  </CacheBuster>,\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}